library(deldir)
require(rgl)
rm(list=ls())
wd <- tk_choose.dir(); setwd(wd)
####Function to create 3d barplots from Stack Overflow####################
binplot.3d <- function(x, y, z, alpha=1, topcol="#ff0000", sidecol="#aaaaaa", linecol="#000000")
{
save <- par3d(skipRedraw=TRUE)
on.exit(par3d(save))
x1 <- c(rep(c(x[1], x[2], x[2], x[1]), 3), rep(x[1], 4), rep(x[2], 4))
z1 <- c(rep(0, 4), rep(c(0, 0, z, z), 4))
y1 <- c(y[1], y[1], y[2], y[2], rep(y[1], 4), rep(y[2], 4), rep(c(y[1], y[2], y[2], y[1]), 2))
x2 <- c(rep(c(x[1], x[1], x[2], x[2]), 2), rep(c(x[1], x[2], rep(x[1], 3), rep(x[2], 3)), 2))
z2 <- c(rep(c(0, z), 4), rep(0, 8), rep(z, 8))
y2 <- c(rep(y[1], 4), rep(y[2], 4), rep(c(rep(y[1], 3), rep(y[2], 3), y[1], y[2]), 2))
rgl.quads(x1, z1, y1, col=rep(sidecol, each=4), alpha=alpha)
rgl.quads(c(x[1], x[2], x[2], x[1]), rep(z, 4), c(y[1], y[1], y[2], y[2]), col=rep(topcol, each=4), alpha=1)
rgl.lines(x2, z2, y2, col=linecol)
}
barplot3d <- function(z, alpha=1, col="#ff0000", scale=1)
{
save <- par3d(skipRedraw=TRUE)
on.exit(par3d(save))
z <- as.matrix(z)
xy <- dim(z)
x <- seq(xy[1])
y <- seq(xy[2])
z <- z / max(z, na.rm=TRUE) * max(x, y) * scale
for (i in x)
{
for (j in y)
{
binplot.3d(c(i, i+1), c(j, j+1), z[i,j], alpha=alpha, topcol=col)
}
}
}
wireframe(zfit)
layout(rbind(c(1,2,3), c(4,5,6), c(7,8,9)),widths=c(1,1,1), heights =c(1,1,1), respect=TRUE)
par(mai = c(0.5, 0.5, 0.2, 0.2)) #speSEfies the margin size in inches
###Read in rSMR -> aSMR crosswalk##########################
load ("rSMR_aSMR_CalcList.RData") ###generated in aSMRXrSMR script
#Eda <- read.csv(file.choose())###Edatopic table
Eda <- read.csv ("Edatopic_v10.7.csv")
colnames(SMRCross) <- c("BGC", "rSMR", "aSMR")
SMRCross$rSMR <- gsub("[[:alpha:]]","", SMRCross$rSMR)
SMRCross$aSMR <- round(SMRCross$aSMR, digits = 0)
sibec <- read.xlsx("SIBEC_for_Portfolio2.xlsx", sheet = 1) ###import actual SI values
sibec <- sibec[sibec$TreeSpp == "Bl",]##choose species
sibec <- sibec[!is.na(sibec$BGCUnit),]
numPlots <- aggregate(MeanPlotSiteIndex ~ BGCUnit, sibec, FUN = length)
BGC <- numPlots$BGCUnit[numPlots$MeanPlotSiteIndex > 4]###remove SI values in zones with little data (use 2 for Lw and Py)
sibec <- sibec[sibec$BGCUnit %in% BGC,]
###Loop to match SI values with edatopes and convert to aSMR
out <- foreach(i = unique(sibec$BGCUnit), .combine = rbind) %do% {
SIsub <- sibec[sibec$BGCUnit == i,c(9,7)]
edaSub <- Eda[Eda$MergedBGC == i, 3:4]
if(length(edaSub$SS_NoSpace) > 0){
SIsub <- merge(SIsub, edaSub, by = "SS_NoSpace", all.x = TRUE)
if(!any(is.na(SIsub$Edatopic))){
SIeda <- aggregate(MeanPlotSiteIndex ~ Edatopic, data =  SIsub, FUN = mean)
colnames(SIeda)[2] <- "SI"
SIeda$rSMR <- gsub("[[:alpha:]]","", SIeda$Edatopic)
SIeda$SNR <- gsub("[[:digit:]]","", SIeda$Edatopic)
SIeda$rSMR <- as.numeric(as.character(SIeda$rSMR))
SMRsub <- SMRCross[SMRCross$BGC == i,-1]
SIeda <- merge(SIeda, SMRsub, by = "rSMR", all.x = TRUE)
temp <- SIeda[SIeda$aSMR %% 1 != 0,] ###if 0.5, give to higher and lower whole num
temp$aSMR <- ceiling(temp$aSMR)
SIeda$aSMR <- floor(SIeda$aSMR)
SIeda <- rbind(SIeda,temp)
SIeda <- SIeda[,c(4,5,3)]
SIeda$SI <- SIeda$SI/max(SIeda$SI)###Standardise out of max SI value in BGC
SIeda$BGC <- i
SIeda
}
}
}
SI2 <- out
SI2 <- dcast(SI2, SNR + aSMR ~ BGC, value.var = "SI", fun.aggregate = mean) ##Convert to matrix
SI2$NumPl <- apply(SI2[,-c(1:2,62)], 1, function(x){length(x[!is.na(x)])}) ###How many values in each edatopic position?
SI2 <- SI2[SI2$NumPl >= 5,] ##Remove rows with few values (has to be lower for Lw and Py)
SI2 <- SI2[,-length(SI2)]
##len <- length(SI2)/5
##SI2[,1:floor(len)][SI2[,1:floor(len)] == "NaN"] <- 0
SI2[SI2 == "NaN"] <- NA
SI2$MeanSI <- rowMeans(SI2[,-(1:2)], na.rm = TRUE)##mean for each edatopic cell
SI2$SESI <- apply(SI2[,-c(1:2)],1,sd,na.rm = TRUE)
SIcomb <- SI2[,c(1,2,length(SI2))]
SImat <- dcast(SIcomb, SNR ~ aSMR)
SImat <- SImat[,-1]
SImat <- as.matrix(SImat)
barplot3d(SImat)### plot distribution
View(SI2)
View(sibec)
View(SIcomb)
View(SIeda)
View(SImat)
View(SIsub)
View(SMRCross)
View(SMRsub)
View(temp)
View(barplot3d)
View(out)
View(sibec)
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuit$Suitability <- ifelse(treeSuit$Suitability %in% c('3'), 1,
ifelse(treeSuit$Suitability %in% c('2'), 2,
ifelse(treeSuit$Suitability %in% c('1'), 3,treeSuit$Suitability )))
.libPaths("E:/R packages351")
require(corpcor)
require(tseries)
require(tcltk)
require(pcaPP)
require(reshape2)
require(corrplot)
require(PerformanceAnalytics)
library(foreach)
rm(list=ls())
wd=tk_choose.dir(); setwd(wd)
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuit$Suitability <- ifelse(treeSuit$Suitability %in% c('3'), 1,
ifelse(treeSuit$Suitability %in% c('2'), 2,
ifelse(treeSuit$Suitability %in% c('1'), 3,treeSuit$Suitability )))
treeSuitraw$Suitability <- ifelse(treeSuit$Suitability %in% c('3'), 1,
ifelse(treeSuit$Suitability %in% c('2'), 2,
ifelse(treeSuit$Suitability %in% c('1'), 3,treeSuit$Suitability )))
treeSuitraw$Suitability <- ifelse(treeSuitraw$Suitability %in% c('3'), 1,
ifelse(treeSuitraw$Suitability %in% c('2'), 2,
ifelse(treeSuitraw$Suitability %in% c('1'), 3,treeSuitraw$Suitability )))
treeSuitraw$All <- paste(treeSuitraw$Unit, treeSuitraw$Spp)
treeSuitremove <- treeSuitraw[duplicated(treeSuitraw$All),]# remove duplicate entries
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
treeSuit <- treeSuitraw[,-c(5)]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
nonZero <- apply(treeSuitMatrix, 2, FUN = function(x){return(length(x[x != 0]))}) ###number of non-zero entries
treeSuitMatrix <- treeSuitMatrix[,nonZero > 3] ###remove species with 3 or less entries
len <- length(treeSuitMatrix)
Spp1 = "Pl"
Spp2 = "Sx"
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2])
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
png("PairwiseCorr.png", width = 6, height = 6, units = "in", res = 300)
corrplot(mat,type = "upper", order = "original", tl.col = "black", tl.srt = 45, tl.cex = .5, is.corr = FALSE)
dev.off()
View(treeSuitremove)
View(treeSuitMatrix)
View(treeSuit)
View(treeSuitMatrix)
##create correlation matrix
corr.spearman <- cor(treeSuitMatrix[,c("Ba", "Bg", "Bl","Cw","Pl", "Lw", "Sx", "Yc")], method=c("spearman"))
##Graphical output1
corrplot(corr.spearman,type = "lower", order = "hclust", tl.col = "black", tl.srt = 45, tl.cex = .5, is.corr = TRUE)
View(corr.spearman)
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuitraw$Suitability <- ifelse(treeSuitraw$Suitability %in% c('3'), 1,
ifelse(treeSuitraw$Suitability %in% c('2'), 2,
ifelse(treeSuitraw$Suitability %in% c('1'), 3,treeSuitraw$Suitability )))
treeSuitraw$All <- paste(treeSuitraw$Unit, treeSuitraw$Spp)
treeSuitremove <- treeSuitraw[duplicated(treeSuitraw$All),]# remove duplicate entries
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
treeSuit <- treeSuitraw[,-c(5)]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuitraw$Suitability <- ifelse(treeSuitraw$Suitability %in% c('3'), 1,
ifelse(treeSuitraw$Suitability %in% c('2'), 2,
ifelse(treeSuitraw$Suitability %in% c('1'), 3,treeSuitraw$Suitability )))
treeSuitraw$All <- paste(treeSuitraw$Unit, treeSuitraw$Spp)
treeSuitremove <- treeSuitraw[duplicated(treeSuitraw$All),]# remove duplicate entries
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
treeSuit <- treeSuitraw[,-c(5)]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
View(treeSuitMatrix)
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
nonZero <- apply(treeSuitMatrix, 2, FUN = function(x){return(length(x[x != 0]))}) ###number of non-zero entries
treeSuitMatrix <- treeSuitMatrix[,nonZero > 3] ###remove species with 3 or less entries
len <- length(treeSuitMatrix)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cov(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
#sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuitraw$Suitability <- ifelse(treeSuitraw$Suitability %in% c('3'), 1,
ifelse(treeSuitraw$Suitability %in% c('2'), 2,
ifelse(treeSuitraw$Suitability %in% c('1'), 3,treeSuitraw$Suitability )))
treeSuitraw$All <- paste(treeSuitraw$Unit, treeSuitraw$Spp)
treeSuitremove <- treeSuitraw[duplicated(treeSuitraw$All),]# remove duplicate entries
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
View(treeSuit)
View(treeSuit)
treeSuit <- treeSuit[treeSuit$Spp ! c("Bc")]
treeSuit <- treeSuit[treeSuit$Spp ! %in% c("Bc")]
treeSuit <- treeSuit[!treeSuit$Spp %in% c("Bc")]
treeSuit <- treeSuit[!treeSuit$Spp = c("Bc")]
treeSuit <- treeSuit[!treeSuit$Spp c("Bc")]
treeSuit <- treeSuit[!treeSuit$Spp = "Bc"]
treeSuit <- treeSuit[!treeSuit$Spp %in% 'Bc']
treeSuit <- treeSuit[!treeSuit$Spp %in% c('Bc')]
treeSuit <- treeSuit[!treeSuit$Spp %in% c('Yc')]
treeSuit <- treeSuit[!treeSuit$Spp ('Yc')]
treeSuit <- treeSuit[treeSuit$Spp %in% c('Yc')]
treeSuit <- treeSuit[treeSuit$Spp]
treeSuit <- treeSuit[treeSuit$Spp]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuit <- treeSuit[treeSuit$Spp]
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
treeSuit <- treeSuitraw[,-c(5)]
treeSuit <- treeSuit[treeSuit$Spp]
View(treeSuitnew)
treeSuit <- treeSuitnew[treeSuitnew$Spp]
treeSuit <- treeSuitnew[(treeSuitnew$Spp)]
treeSuit <- treeSuit['Yc']
treeSuit <- treeSuit[,-c('Bc')]
treeSuitraw$Suitability %in% c('1')
treeSuit <- treeSuit[treeSuit]
treeSuit <- treeSuitraw[,-c(5)]
treeSuit <- treeSuit[treeSuit]
treeSuit <- treeSuit[treeSuit$Spp == "Yc"]
treeSuit <- treeSuit[treeSuit(treeSuit$Spp == "Yc")]
[
select <- "Yc"
treeSuit <- treeSuit[treeSuit$Spp %in% select]
str(treeSuit)
treeSuit$Spp <- as.character(treeSuit$Spp)
select <- "Yc"
treeSuit <- treeSuit[treeSuit$Spp %in% select]
treeSuit <- treeSuit[treeSuit$BGC %in% c('ICHmc1')]
treeSuit <- as.matrix (treeSuit)
select <- "Yc"
treeSuit <- treeSuit[treeSuit$BGC %in% c('ICHmc1')]
View(treeSuit)
treeSuit <- treeSuit[treeSuit$Spp %in% select]
treeSuit <- treeSuitraw[,-c(5)]
select <- "Yc"
treeSuit <- treeSuit[treeSuit$Spp %in% select]
treeSuit$Spp
treeSuit <- treeSuit[,treeSuit$Spp %in% select]
treeSuit <- treeSuit[treeSuit$Spp %in% select,]
View(treeSuit)
treeSuit <- treeSuitraw[,-c(5)]
select <- c("Ba","Bl","Cw", "Fd", "Hw", "Lw", "Pl", "Pw", "Ss", "Sx", "Yc")
treeSuit <- treeSuit[treeSuit$Spp %in% select,]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
nonZero <- apply(treeSuitMatrix, 2, FUN = function(x){return(length(x[x != 0]))}) ###number of non-zero entries
treeSuitMatrix <- treeSuitMatrix[,nonZero > 3] ###remove species with 3 or less entries
len <- length(treeSuitMatrix)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
#sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
treeSuit <- treeSuitraw[,-c(5)]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
nonZero <- apply(treeSuitMatrix, 2, FUN = function(x){return(length(x[x != 0]))}) ###number of non-zero entries
treeSuitMatrix <- treeSuitMatrix[,nonZero > 20] ###remove species with 3 or less entries
len <- length(treeSuitMatrix)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
#sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuitraw$Suitability <- ifelse(treeSuitraw$Suitability %in% c('3'), 1,
ifelse(treeSuitraw$Suitability %in% c('2'), 2,
ifelse(treeSuitraw$Suitability %in% c('1'), 3,treeSuitraw$Suitability )))
treeSuitraw$All <- paste(treeSuitraw$Unit, treeSuitraw$Spp)
treeSuitremove <- treeSuitraw[duplicated(treeSuitraw$All),]# remove duplicate entries
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
treeSuit <- treeSuitraw[,-c(5)]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
nonZero <- apply(treeSuitMatrix, 2, FUN = function(x){return(length(x[x != 0]))}) ###number of non-zero entries
treeSuitMatrix <- treeSuitMatrix[,nonZero > 40] ###remove species with 3 or less entries
len <- length(treeSuitMatrix)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
#sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuitraw$Suitability <- ifelse(treeSuitraw$Suitability %in% c('3'), 1,
ifelse(treeSuitraw$Suitability %in% c('2'), 1,
ifelse(treeSuitraw$Suitability %in% c('1'), 1,treeSuitraw$Suitability )))
treeSuitraw$All <- paste(treeSuitraw$Unit, treeSuitraw$Spp)
treeSuitremove <- treeSuitraw[duplicated(treeSuitraw$All),]# remove duplicate entries
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
treeSuit <- treeSuitraw[,-c(5)]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
nonZero <- apply(treeSuitMatrix, 2, FUN = function(x){return(length(x[x != 0]))}) ###number of non-zero entries
treeSuitMatrix <- treeSuitMatrix[,nonZero > 40] ###remove species with 3 or less entries
len <- length(treeSuitMatrix)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
#treeSuit <- read.csv("TreeSuitabilitybySS_Reversed2.csv") # species by siteseries suitability matrix with n/As replaced with zeros and the suitability ranks reversed
treeSuitraw <- read.csv ("TreeSppSuit_v10.10.csv")
treeSuitraw$Suitability <- ifelse(treeSuitraw$Suitability %in% c('3'), 100,
ifelse(treeSuitraw$Suitability %in% c('2'), 80,
ifelse(treeSuitraw$Suitability %in% c('1'), 40,treeSuitraw$Suitability )))
treeSuitraw$All <- paste(treeSuitraw$Unit, treeSuitraw$Spp)
treeSuitremove <- treeSuitraw[duplicated(treeSuitraw$All),]# remove duplicate entries
treeSuitnew <-treeSuitraw[!duplicated(treeSuitraw$All),]
treeSuit <- treeSuitraw[,-c(5)]
treeSuitMatrix <- dcast(treeSuit, Unit ~ Spp, mean)
treeSuitMatrix[is.na(treeSuitMatrix)] <- 0
####Kiri###################
treeSuitMatrix <- treeSuitMatrix[,-1]
nonZero <- apply(treeSuitMatrix, 2, FUN = function(x){return(length(x[x != 0]))}) ###number of non-zero entries
treeSuitMatrix <- treeSuitMatrix[,nonZero > 40] ###remove species with 3 or less entries
len <- length(treeSuitMatrix)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
###calculate pairwise correlations
out <- foreach(Spp1 = as.character(colnames(treeSuitMatrix)), .combine = rbind) %do% {
#pos = grep(Spp1, colnames(treeSuitMatrix))
names <- as.character(colnames(treeSuitMatrix))
foreach(Spp2 = names, .combine = rbind) %do% {
sub <- treeSuitMatrix[,c(Spp1,Spp2)]
#sub <- sub[rowSums(sub) != 0,] ### remove where both species are non-existant
#sub[sub == 0] <- 5 ###replace 0 with 5
correl <- cor(sub[,1],sub[,2], method="spearman")
out <- data.frame(Spp1 = Spp1, Spp2 = Spp2, Value = correl)
out
}
}
mat <- dcast(out, Spp1 ~ Spp2, value.var = "Value") ###convert to matrix
rownames(mat) <- mat$Spp1
mat <- mat[,-1]
mat <- as.matrix(mat)
View(mat)
png("PairwiseCorr.png", width = 6, height = 6, units = "in", res = 300)
corrplot(mat,type = "upper", order = "original", tl.col = "black", tl.srt = 45, tl.cex = .5, is.corr = FALSE)
dev.off()
write.csv(mat, "TreeSuitability Matrix.csv")
